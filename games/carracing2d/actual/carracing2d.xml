<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<modelClass>
    <actions>
        <key>-</key>
        <name>noop()</name>
        <timeelapsed>1</timeelapsed>
        <effect>player['nitro_on'] == False and (previousplayer['xCoordinate'] == player['xCoordinate'])</effect>
        <frequency_of_use>0.4</frequency_of_use>
        <positive_reward_impact>0.3</positive_reward_impact>
    </actions>
    <actions>
        <key>LEFT_ARROW</key>
        <name>left()</name>
        <timeelapsed>1.0</timeelapsed>
        <effect>player['nitro_on'] == False and (((previousplayer['xCoordinate'] - 4  &gt;= player['xCoordinate']) and (previousplayer['xCoordinate'] - 6 &lt;= player['xCoordinate']) and player['xCoordinate']>40) or (player['xCoordinate']==40))  and (previousplayer['yCoordinate'] == player['yCoordinate'])</effect>
        <frequency_of_use>0.2</frequency_of_use>
        <positive_reward_impact>1</positive_reward_impact>
    </actions>
    <actions>
        <key>RIGHT_ARROW</key>
        <name>right()</name>
        <timeelapsed>1.0</timeelapsed>
        <effect>player['nitro_on'] == False and (((previousplayer['xCoordinate'] + 4  &lt;= player['xCoordinate']) and (previousplayer['xCoordinate'] + 6 &gt;= player['xCoordinate']) and player['xCoordinate']+player['width']&lt;250) or (player['xCoordinate']+player['width']==250))  and (previousplayer['yCoordinate'] == player['yCoordinate'])</effect>
        <frequency_of_use>0.2</frequency_of_use>
        <positive_reward_impact>1</positive_reward_impact>
    </actions>
    <actions>
        <key>N</key>
        <name>nito_on()</name>
        <timeelapsed>1</timeelapsed>
        <effect>(player['nitro_on'] and previousplayer['nitro']>0) or (player['nitro_on']== False and previousplayer['nitro']&lt;=0)</effect>
        <frequency_of_use>0.1</frequency_of_use>
        <positive_reward_impact>1</positive_reward_impact>
    </actions>
    <actions>
        <key>N</key>
        <key>LEFT_ARROW</key>
        <name>nitro_left()</name>
        <timeelapsed>1.0</timeelapsed>
        <effect>((player['nitro_on'] and previousplayer['nitro']>0) or (player['nitro_on']== False and previousplayer['nitro']&lt;=0)) and (((previousplayer['xCoordinate'] - 4  &gt;= player['xCoordinate']) and (previousplayer['xCoordinate'] - 6 &lt;= player['xCoordinate']) and player['xCoordinate']>40) or (player['xCoordinate']==40))  and (previousplayer['yCoordinate'] == player['yCoordinate'])</effect>
        <frequency_of_use>0.05</frequency_of_use>
        <positive_reward_impact>1</positive_reward_impact>
    </actions>
    <actions>
        <key>N</key>
        <key>RIGHT_ARROW</key>
        <name>nitro_right()</name>
        <timeelapsed>1.0</timeelapsed>
        <effect>((player['nitro_on'] and previousplayer['nitro']>0) or (player['nitro_on']== False and previousplayer['nitro']&lt;=0)) and (((previousplayer['xCoordinate'] + 4  &lt;= player['xCoordinate']) and (previousplayer['xCoordinate'] + 6 &gt;= player['xCoordinate']) and player['xCoordinate']+player['width']&lt;250) or (player['xCoordinate']+player['width']==250))  and (previousplayer['yCoordinate'] == player['yCoordinate'])</effect>
        <frequency_of_use>0.05</frequency_of_use>
        <positive_reward_impact>1</positive_reward_impact>
    </actions>
    <assets>
        <multiplicity>*</multiplicity>
        <name>car</name>
        <stereotype>DangerousObstacle</stereotype>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>xCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>yCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>-1000.0</float_value>
            <name>fileLocation</name>
            <string_value></string_value>
            <type>string</type>
        </stereotype_attributes>
    </assets>
    <assets>
        <multiplicity>*</multiplicity>
        <name>barrel</name>
        <stereotype>DangerousObstacle</stereotype>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>xCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>yCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>-1000.0</float_value>
            <name>fileLocation</name>
            <string_value></string_value>
            <type>string</type>
        </stereotype_attributes>
    </assets>
     <assets>
        <multiplicity>*</multiplicity>
        <name>roadblock</name>
        <stereotype>DangerousObstacle</stereotype>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>xCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>yCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>-1000.0</float_value>
            <name>fileLocation</name>
            <string_value></string_value>
            <type>string</type>
        </stereotype_attributes>
    </assets>
    <assets>
        <multiplicity>*</multiplicity>
        <name>coin</name>
        <stereotype>Collectable</stereotype>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>xCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>yCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value></float_value>
            <name>effect</name>
            <string_value>(previousScore['coincount']+1 == score['coincount'])</string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>2.0</float_value>
            <name>scoreImpact</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
    </assets>
    <assets>
        <multiplicity>*</multiplicity>
        <name>feul</name>
        <stereotype>Booster</stereotype>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>xCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>yCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>5</float_value>
            <name>scoreImpact</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>1.0</float_value>
            <name>effect</name>
            <string_value>(previousScore['feul']+25 == score['feul'])</string_value>
            <type>numeric</type>
        </stereotype_attributes>
    </assets>
    <rewards>
        <multiplicity>1</multiplicity>
        <name>car_dodge</name>
        <stereotype>Reward</stereotype>
        <stereotype_attributes>
            <float_value>1.0</float_value>
            <name>scoreImpact</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value></float_value>
            <name>effect</name>
            <string_value>(previousScore['car_dodge']+1 == score['feul'])</string_value>
            <type>numeric</type>
        </stereotype_attributes>
    </rewards>
    <assets>
        <multiplicity>1</multiplicity>
        <name>player</name>
        <stereotype>Avatar</stereotype>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>xCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>yCoordinate</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>-1000.0</float_value>
            <name>fileLocation</name>
            <string_value></string_value>
            <type>string</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>1.0</float_value>
            <name>lifecount</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
        <stereotype_attributes>
            <float_value>0.0</float_value>
            <name>direction</name>
            <string_value></string_value>
            <type>numeric</type>
        </stereotype_attributes>
    </assets>
    <name>CarRacing2d</name>
    <statemachine>
        <allmystates>
            <goesToFinal>false</goesToFinal>
            <name>init</name>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <sourceName>init</sourceName>
                <targetName>init-choice</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>pseudostate</statetype>
        </allmystates>
        <allmystates>
            <constraint>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'])==False</constraint>
            <goesToFinal>false</goesToFinal>
            <name>car-in-safe-lane</name>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'])==False</guard>
                <sourceName>car-in-safe-lane</sourceName>
                <targetName>car-in-safe-lane</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']&lt;392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5]) </guard>
                <sourceName>car-in-safe-lane</sourceName>
                <targetName>car-inline-with-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']>=392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</guard>
                <sourceName>car-in-safe-lane</sourceName>
                <targetName>car-touch-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']&lt;closestobs['collide_height']  and closestobs['xCoordinate'] &lt;= player['xCoordinate'] &lt;= closestobs['xCoordinate'] + closestobs['width'] or closestobs['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= closestobs['xCoordinate'] + closestobs['width'])</guard>
                <sourceName>car-in-safe-lane</sourceName>
                <targetName>car-inline-with-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']>=closestobs['collide_height']  and player['xCoordinate']+player['width'] >= closestobs['xCoordinate'] and player['xCoordinate']&lt;=closestobs['xCoordinate']+closestobs['width'] )</guard>
                <sourceName>car-in-safe-lane</sourceName>
                <targetName>car-touch-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard> score['feul']&lt;=0</guard>
                <sourceName>car-in-safe-lane</sourceName>
                <targetName>out-of-feul</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>state</statetype>
            <stereotype></stereotype>
        </allmystates>
        <allmystates>
            <goesToFinal>false</goesToFinal>
            <name>car-inline-with-collectable</name>
            <constraint>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']&lt;392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</constraint>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'])==False</guard>
                <sourceName>car-inline-with-collectable</sourceName>
                <targetName>car-in-safe-lane</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']&lt;392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5]) </guard>
                <sourceName>car-inline-with-collectable</sourceName>
                <targetName>car-inline-with-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']>=392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</guard>
                <sourceName>car-inline-with-collectable</sourceName>
                <targetName>car-touch-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']&lt;closestobs['collide_height']  and closestobs['xCoordinate'] &lt;= player['xCoordinate'] &lt;= closestobs['xCoordinate'] + closestobs['width'] or closestobs['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= closestobs['xCoordinate'] + closestobs['width'])</guard>
                <sourceName>car-inline-with-collectable</sourceName>
                <targetName>car-inline-with-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']>=closestobs['collide_height']  and player['xCoordinate']+player['width'] >= closestobs['xCoordinate'] and player['xCoordinate']&lt;=closestobs['xCoordinate']+closestobs['width'] )</guard>
                <sourceName>car-inline-with-collectable</sourceName>
                <targetName>car-touch-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard> score['feul']&lt;=0</guard>
                <sourceName>car-inline-with-collectable</sourceName>
                <targetName>out-of-feul</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>state</statetype>
            <stereotype>good</stereotype>
        </allmystates>
        <allmystates>
            <goesToFinal>false</goesToFinal>
            <name>car-touch-collectable</name>
            <constraint>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']>=392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</constraint>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'])==False</guard>
                <sourceName>>car-touch-collectable</sourceName>
                <targetName>car-in-safe-lane</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']&lt;392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5]) </guard>
                <sourceName>>car-touch-collectable</sourceName>
                <targetName>car-inline-with-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']>=392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</guard>
                <sourceName>>car-touch-collectable</sourceName>
                <targetName>car-touch-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']&lt;closestobs['collide_height']  and closestobs['xCoordinate'] &lt;= player['xCoordinate'] &lt;= closestobs['xCoordinate'] + closestobs['width'] or closestobs['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= closestobs['xCoordinate'] + closestobs['width'])</guard>
                <sourceName>>car-touch-collectable</sourceName>
                <targetName>car-inline-with-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']>=closestobs['collide_height']  and player['xCoordinate']+player['width'] >= closestobs['xCoordinate'] and player['xCoordinate']&lt;=closestobs['xCoordinate']+closestobs['width'] )</guard>
                <sourceName>>car-touch-collectable</sourceName>
                <targetName>car-touch-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard> score['feul']&lt;=0</guard>
                <sourceName>>car-touch-collectable</sourceName>
                <targetName>out-of-feul</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>state</statetype>
            <stereotype>good</stereotype>
        </allmystates>
        <allmystates>
            <goesToFinal>false</goesToFinal>
            <name>car-inline-with-obstacle</name>
            <constraint>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']&lt;closestobs['collide_height']  and closestobs['xCoordinate'] &lt;= player['xCoordinate'] &lt;= closestobs['xCoordinate'] + closestobs['width'] or closestobs['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= closestobs['xCoordinate'] + closestobs['width'])</constraint>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'])==False</guard>
                <sourceName>car-inline-with-obstacle</sourceName>
                <targetName>car-in-safe-lane</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']&lt;392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</guard>
                <sourceName>car-inline-with-obstacle</sourceName>
                <targetName>car-inline-with-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>any(asset['xCoordinate'] &lt;= player['xCoordinate'] &lt;= asset['xCoordinate'] + asset['width'] or asset['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= asset['xCoordinate'] + asset['width'] and asset['yCoordinate']+asset['height']>=392  for asset in allassets if asset['yCoordinate'] == max(allassets, key=lambda x: x['yCoordinate'])['yCoordinate'] and asset['type'] in [4,5])</guard>
                <sourceName>car-inline-with-obstacle</sourceName>
                <targetName>car-touch-collectable</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']&lt;closestobs['collide_height']  and closestobs['xCoordinate'] &lt;= player['xCoordinate'] &lt;= closestobs['xCoordinate'] + closestobs['width'] or closestobs['xCoordinate'] &lt;= player['xCoordinate'] + player['width'] &lt;= closestobs['xCoordinate'] + closestobs['width'])</guard>
                <sourceName>car-inline-with-obstacle</sourceName>
                <targetName>car-inline-with-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']>=closestobs['collide_height']  and player['xCoordinate']+player['width'] >= closestobs['xCoordinate'] and player['xCoordinate']&lt;=closestobs['xCoordinate']+closestobs['width'] )</guard>
                <sourceName>car-inline-with-obstacle</sourceName>
                <targetName>car-touch-obstacle</targetName>
            </outgoingTransitions>
            <outgoingTransitions>
                <guard> score['feul']&lt;=0</guard>
                <sourceName>car-inline-with-obstacle</sourceName>
                <targetName>out-of-feul</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>state</statetype>
            <stereotype>bad</stereotype>
        </allmystates>
        <allmystates>
            <goesToFinal>false</goesToFinal>
            <name>car-touch-obstacle</name>
            <constraint>len(allassets)>0 and max(allassets, key=lambda x: x['yCoordinate'])['type'] in [1,2,3] and (closestobs and closestobs['yCoordinate']+closestobs['height']>=closestobs['collide_height']  and player['xCoordinate']+player['width'] >= closestobs['xCoordinate'] and player['xCoordinate']&lt;=closestobs['xCoordinate']+closestobs['width'] )</constraint>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <guard></guard>
                <sourceName>car-touch-obstacle</sourceName>
                <targetName>final</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>state</statetype>
            <stereotype>dead</stereotype>
        </allmystates>
        <allmystates>
            <goesToFinal>false</goesToFinal>
            <name>out-of-feul</name>
            <constraint> score['feul']&lt;=0</constraint>
            <numberofregions>0</numberofregions>
            <outgoingTransitions>
                <guard></guard>
                <sourceName>out-of-feul</sourceName>
                <targetName>final</targetName>
            </outgoingTransitions>
            <region>Region1</region>
            <statetype>state</statetype>
            <stereotype>dead</stereotype>
        </allmystates>
        <parent>RacingcarGame</parent>
    </statemachine>
    <stereotype>Game</stereotype>
    <stereotype_attributes>
        <float_value>0.0</float_value>
        <name>score</name>
        <string_value></string_value>
        <type>numeric</type>
        <update_capacity>1</update_capacity>
    </stereotype_attributes>
    <stereotype_attributes>
        <float_value>0.0</float_value>
        <name>timeelapsed</name>
        <string_value></string_value>
        <type>numeric</type>
    </stereotype_attributes>
</modelClass>
